cluster:
  name: ${CLUSTER_NAME}
  search_path:
    - docker-ecs
    - docker-ecs/cloud-compose/templates
  logging:
    driver: awslogs
    meta:
      group: /cloud-compose/${CLUSTER_NAME}
  aws:
    ami: ${IMAGE_ID} or ${IMAGE_NAME_TAG}
    instance_policy: '{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "ecs:DeregisterContainerInstance", "ecs:DiscoverPollEndpoint", "ecs:Poll", "ecs:RegisterContainerInstance", "ecs:StartTelemetrySession", "ecs:Submit*", "ecr:GetAuthorizationToken", "ecr:BatchCheckLayerAvailability", "ecr:GetDownloadUrlForLayer", "ecr:BatchGetImage" ], "Resource": "*" }, { "Action": [ "logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents" ], "Effect": "Allow", "Resource": "*" } ] }'
    username: ${IMAGE_USERNAME}
    terminate_protection: false
    security_groups:
      - ${SECURITY_GROUP_ID}
    vpc: ${VPC_ID}
    ebs_optimized: false
    instance_type: t2.medium
    keypair: drydock
    volumes:
      - name: root
        size: 30G
      - name: docker
        size: 20G
        block: /dev/xvdz
        file_system: lvm2
        meta:
          group: docker
          volumes:
            - name: data
              size: 19G
            - name: metadata
              size: 900M
      - name: data
        size: 10G
        block: /dev/xvdc
        file_system: ext4
        meta:
          format: true
          mount: /data/mongodb
    tags:
      datadog: monitored
    asg:
      subnets:
        - ${CLUSTER_SUBNET_0}
        - ${CLUSTER_SUBNET_1}
        - ${CLUSTER_SUBNET_2}
image:
  name: docker
  version: '1.10'
  search_path:
    - docker-ecs
    - docker-ecs/cloud-compose/templates
